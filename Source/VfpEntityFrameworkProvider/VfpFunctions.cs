//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generation date and time : 5/22/2013 11:48:43.9666186
//
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace VfpEntityFrameworkProvider
{
    /// <summary>
    /// Contains function stubs that expose Vfp methods in Linq to Entities.
    /// </summary>
    public static class VfpFunctions
    {
        /// <summary>
        /// Proxy for the function Vfp.ASC
        /// </summary>
        [EdmFunction("Vfp", "ASC")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string")]
        public static System.Int32? Ascii(System.String string1)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.CHR
        /// </summary>
        [EdmFunction("Vfp", "CHR")]
        public static System.String Chr(System.Int32? number)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.AT
        /// </summary>
        [EdmFunction("Vfp", "AT")]
        public static System.Int32? At(System.String cSearchExpression, System.String cExpressionSearched)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.AT
        /// </summary>
        [EdmFunction("Vfp", "AT")]
        public static System.Int32? At(System.String cSearchExpression, System.String cExpressionSearched, System.Int32? nOccurrence)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.AT
        /// </summary>
        [EdmFunction("Vfp", "AT")]
        public static System.Int64? At(System.String cSearchExpression, System.String cExpressionSearched, System.Int64? nOccurrence)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ATC
        /// </summary>
        [EdmFunction("Vfp", "ATC")]
        public static System.Int32? Atc(System.String cSearchExpression, System.String cExpressionSearched)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ATC
        /// </summary>
        [EdmFunction("Vfp", "ATC")]
        public static System.Int32? Atc(System.String cSearchExpression, System.String cExpressionSearched, System.Int32? nOccurrence)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ATC
        /// </summary>
        [EdmFunction("Vfp", "ATC")]
        public static System.Int64? Atc(System.String cSearchExpression, System.String cExpressionSearched, System.Int64? nOccurrence)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STRTRAN
        /// </summary>
        [EdmFunction("Vfp", "STRTRAN")]
        public static System.String Strtran(System.String cSearched, System.String cExpressionSought, System.String cReplacement)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STRTRAN
        /// </summary>
        [EdmFunction("Vfp", "STRTRAN")]
        public static System.String Strtran(System.String cSearched, System.String cExpressionSought, System.String cReplacement, System.Int32? nStartOccurrence)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STRTRAN
        /// </summary>
        [EdmFunction("Vfp", "STRTRAN")]
        public static System.String Strtran(System.String cSearched, System.String cExpressionSought, System.String cReplacement, System.Int32? nStartOccurrence, System.Int32? nNumberOfOccurrences)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STRTRAN
        /// </summary>
        [EdmFunction("Vfp", "STRTRAN")]
        public static System.String Strtran(System.String cSearched, System.String cExpressionSought, System.String cReplacement, System.Int32? nStartOccurrence, System.Int32? nNumberOfOccurrences, System.Int32? nFlags)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.REPLICATE
        /// </summary>
        [EdmFunction("Vfp", "REPLICATE")]
        public static System.String Replicate(System.String strTarget, System.Int32? count)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ALLTRIM
        /// </summary>
        [EdmFunction("Vfp", "ALLTRIM")]
        public static System.String AllTrim(System.String str)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SPACE
        /// </summary>
        [EdmFunction("Vfp", "SPACE")]
        public static System.String Space(System.Int32? arg1)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STR
        /// </summary>
        [EdmFunction("Vfp", "STR")]
        public static System.String StringConvert(System.Double? number)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STR
        /// </summary>
        [EdmFunction("Vfp", "STR")]
        public static System.String StringConvert(System.Decimal? number)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STR
        /// </summary>
        [EdmFunction("Vfp", "STR")]
        public static System.String StringConvert(System.Double? number, System.Int32? length)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STR
        /// </summary>
        [EdmFunction("Vfp", "STR")]
        public static System.String StringConvert(System.Decimal? number, System.Int32? length)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STR
        /// </summary>
        [EdmFunction("Vfp", "STR")]
        public static System.String StringConvert(System.Double? number, System.Int32? length, System.Int32? decimalPlaces)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STR
        /// </summary>
        [EdmFunction("Vfp", "STR")]
        public static System.String StringConvert(System.Decimal? number, System.Int32? length, System.Int32? decimalPlaces)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.STUFF
        /// </summary>
        [EdmFunction("Vfp", "STUFF")]
        public static System.String Stuff(System.String strInput, System.Int32? start, System.Int32? length, System.String strReplacement)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SUBSTR
        /// </summary>
        [EdmFunction("Vfp", "SUBSTR")]
        public static System.String Substr(System.String str, System.Int64? start, System.Int64? length)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ACOS
        /// </summary>
        [EdmFunction("Vfp", "ACOS")]
        public static System.Double? Acos(System.Double? arg1)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ACOS
        /// </summary>
        [EdmFunction("Vfp", "ACOS")]
        public static System.Double? Acos(System.Decimal? arg1)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ASIN
        /// </summary>
        [EdmFunction("Vfp", "ASIN")]
        public static System.Double? Asin(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ASIN
        /// </summary>
        [EdmFunction("Vfp", "ASIN")]
        public static System.Double? Asin(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ATAN
        /// </summary>
        [EdmFunction("Vfp", "ATAN")]
        public static System.Double? Atan(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ATAN
        /// </summary>
        [EdmFunction("Vfp", "ATAN")]
        public static System.Double? Atan(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ATN2
        /// </summary>
        [EdmFunction("Vfp", "ATN2")]
        public static System.Double? Atn2(System.Double? arg1, System.Double? arg2)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ATN2
        /// </summary>
        [EdmFunction("Vfp", "ATN2")]
        public static System.Double? Atn2(System.Decimal? arg1, System.Decimal? arg2)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.COS
        /// </summary>
        [EdmFunction("Vfp", "COS")]
        public static System.Double? Cos(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.COS
        /// </summary>
        [EdmFunction("Vfp", "COS")]
        public static System.Double? Cos(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.RTOD
        /// </summary>
        [EdmFunction("Vfp", "RTOD")]
        public static System.Decimal? Rtod(System.Decimal? arg1)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.RTOD
        /// </summary>
        [EdmFunction("Vfp", "RTOD")]
        public static System.Double? Rtod(System.Double? arg1)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EXP
        /// </summary>
        [EdmFunction("Vfp", "EXP")]
        public static System.Double? Exp(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EXP
        /// </summary>
        [EdmFunction("Vfp", "EXP")]
        public static System.Double? Exp(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.LOG
        /// </summary>
        [EdmFunction("Vfp", "LOG")]
        public static System.Double? Log(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.LOG
        /// </summary>
        [EdmFunction("Vfp", "LOG")]
        public static System.Double? Log(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.LOG10
        /// </summary>
        [EdmFunction("Vfp", "LOG10")]
        public static System.Double? Log10(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.LOG10
        /// </summary>
        [EdmFunction("Vfp", "LOG10")]
        public static System.Double? Log10(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.PI
        /// </summary>
        [EdmFunction("Vfp", "PI")]
        public static System.Double? Pi()
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.DTOR
        /// </summary>
        [EdmFunction("Vfp", "DTOR")]
        public static System.Int32? Dtor(System.Int32? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.DTOR
        /// </summary>
        [EdmFunction("Vfp", "DTOR")]
        public static System.Int64? Dtor(System.Int64? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.DTOR
        /// </summary>
        [EdmFunction("Vfp", "DTOR")]
        public static System.Decimal? Dtor(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.DTOR
        /// </summary>
        [EdmFunction("Vfp", "DTOR")]
        public static System.Double? Dtor(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.RAND
        /// </summary>
        [EdmFunction("Vfp", "RAND")]
        public static System.Double? Rand()
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.RAND
        /// </summary>
        [EdmFunction("Vfp", "RAND")]
        public static System.Double? Rand(System.Int32? seed)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SIGN
        /// </summary>
        [EdmFunction("Vfp", "SIGN")]
        public static System.Int32? Sign(System.Int32? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SIGN
        /// </summary>
        [EdmFunction("Vfp", "SIGN")]
        public static System.Int64? Sign(System.Int64? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SIGN
        /// </summary>
        [EdmFunction("Vfp", "SIGN")]
        public static System.Decimal? Sign(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SIGN
        /// </summary>
        [EdmFunction("Vfp", "SIGN")]
        public static System.Double? Sign(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SIN
        /// </summary>
        [EdmFunction("Vfp", "SIN")]
        public static System.Double? Sin(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SIN
        /// </summary>
        [EdmFunction("Vfp", "SIN")]
        public static System.Double? Sin(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SQRT
        /// </summary>
        [EdmFunction("Vfp", "SQRT")]
        public static System.Double? SquareRoot(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SQRT
        /// </summary>
        [EdmFunction("Vfp", "SQRT")]
        public static System.Double? SquareRoot(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.TAN
        /// </summary>
        [EdmFunction("Vfp", "TAN")]
        public static System.Double? Tan(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.TAN
        /// </summary>
        [EdmFunction("Vfp", "TAN")]
        public static System.Double? Tan(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.CDOW
        /// </summary>
        [EdmFunction("Vfp", "CDOW")]
        public static System.String DayOfWeek(System.DateTime? date)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.DATETIME
        /// </summary>
        [EdmFunction("Vfp", "DATETIME")]
        public static System.DateTime? DateTime()
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.CMONTH
        /// </summary>
        [EdmFunction("Vfp", "CMONTH")]
        public static System.String MonthName(System.DateTime? date)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.SEC
        /// </summary>
        [EdmFunction("Vfp", "SEC")]
        public static System.Int32? Sec(System.DateTime? date)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.ISDIGIT
        /// </summary>
        [EdmFunction("Vfp", "ISDIGIT")]
        public static System.Boolean? IsDigit(System.String arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.String arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.DateTime? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.Boolean? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.Int32? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.Int64? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Vfp.EMPTY
        /// </summary>
        [EdmFunction("Vfp", "EMPTY")]
        public static System.Boolean? Empty(System.Single? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

    }
}
