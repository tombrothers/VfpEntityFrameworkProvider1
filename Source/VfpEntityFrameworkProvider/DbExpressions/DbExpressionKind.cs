namespace VfpEntityFrameworkProvider.DbExpressions {
    public enum DbExpressionKind {
        All = System.Data.Common.CommandTrees.DbExpressionKind.All,
        And = System.Data.Common.CommandTrees.DbExpressionKind.And,
        Any = System.Data.Common.CommandTrees.DbExpressionKind.Any,
        Case = System.Data.Common.CommandTrees.DbExpressionKind.Case,
        Cast = System.Data.Common.CommandTrees.DbExpressionKind.Cast,
        Constant = System.Data.Common.CommandTrees.DbExpressionKind.Constant,
        CrossApply = System.Data.Common.CommandTrees.DbExpressionKind.CrossApply,
        CrossJoin = System.Data.Common.CommandTrees.DbExpressionKind.CrossJoin,
        Deref = System.Data.Common.CommandTrees.DbExpressionKind.Deref,
        Distinct = System.Data.Common.CommandTrees.DbExpressionKind.Distinct,
        Divide = System.Data.Common.CommandTrees.DbExpressionKind.Divide,
        Element = System.Data.Common.CommandTrees.DbExpressionKind.Element,
        EntityRef = System.Data.Common.CommandTrees.DbExpressionKind.EntityRef,
        Equals = System.Data.Common.CommandTrees.DbExpressionKind.Equals,
        Except = System.Data.Common.CommandTrees.DbExpressionKind.Except,
        Filter = System.Data.Common.CommandTrees.DbExpressionKind.Filter,
        FullOuterJoin = System.Data.Common.CommandTrees.DbExpressionKind.FullOuterJoin,
        Function = System.Data.Common.CommandTrees.DbExpressionKind.Function,
        GreaterThan = System.Data.Common.CommandTrees.DbExpressionKind.GreaterThan,
        GreaterThanOrEquals = System.Data.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals,
        GroupBy = System.Data.Common.CommandTrees.DbExpressionKind.GroupBy,
        InnerJoin = System.Data.Common.CommandTrees.DbExpressionKind.InnerJoin,
        Intersect = System.Data.Common.CommandTrees.DbExpressionKind.Intersect,
        IsEmpty = System.Data.Common.CommandTrees.DbExpressionKind.IsEmpty,
        IsNull = System.Data.Common.CommandTrees.DbExpressionKind.IsNull,
        IsOf = System.Data.Common.CommandTrees.DbExpressionKind.IsOf,
        IsOfOnly = System.Data.Common.CommandTrees.DbExpressionKind.IsOfOnly,
        LeftOuterJoin = System.Data.Common.CommandTrees.DbExpressionKind.LeftOuterJoin,
        LessThan = System.Data.Common.CommandTrees.DbExpressionKind.LessThan,
        LessThanOrEquals = System.Data.Common.CommandTrees.DbExpressionKind.LessThanOrEquals,
        Like = System.Data.Common.CommandTrees.DbExpressionKind.Like,
        Limit = System.Data.Common.CommandTrees.DbExpressionKind.Limit,
        Minus = System.Data.Common.CommandTrees.DbExpressionKind.Minus,
        Modulo = System.Data.Common.CommandTrees.DbExpressionKind.Modulo,
        Multiply = System.Data.Common.CommandTrees.DbExpressionKind.Multiply,
        NewInstance = System.Data.Common.CommandTrees.DbExpressionKind.NewInstance,
        Not = System.Data.Common.CommandTrees.DbExpressionKind.Not,
        NotEquals = System.Data.Common.CommandTrees.DbExpressionKind.NotEquals,
        Null = System.Data.Common.CommandTrees.DbExpressionKind.Null,
        OfType = System.Data.Common.CommandTrees.DbExpressionKind.OfType,
        OfTypeOnly = System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly,
        Or = System.Data.Common.CommandTrees.DbExpressionKind.Or,
        OuterApply = System.Data.Common.CommandTrees.DbExpressionKind.OuterApply,
        ParameterReference = System.Data.Common.CommandTrees.DbExpressionKind.ParameterReference,
        Plus = System.Data.Common.CommandTrees.DbExpressionKind.Plus,
        Project = System.Data.Common.CommandTrees.DbExpressionKind.Project,
        Property = System.Data.Common.CommandTrees.DbExpressionKind.Property,
        Ref = System.Data.Common.CommandTrees.DbExpressionKind.Ref,
        RefKey = System.Data.Common.CommandTrees.DbExpressionKind.RefKey,
        RelationshipNavigation = System.Data.Common.CommandTrees.DbExpressionKind.RelationshipNavigation,
        Scan = System.Data.Common.CommandTrees.DbExpressionKind.Scan,
        Skip = System.Data.Common.CommandTrees.DbExpressionKind.Skip,
        Sort = System.Data.Common.CommandTrees.DbExpressionKind.Sort,
        Treat = System.Data.Common.CommandTrees.DbExpressionKind.Treat,
        UnaryMinus = System.Data.Common.CommandTrees.DbExpressionKind.UnaryMinus,
        UnionAll = System.Data.Common.CommandTrees.DbExpressionKind.UnionAll,
        VariableReference = System.Data.Common.CommandTrees.DbExpressionKind.VariableReference,
        Lambda = System.Data.Common.CommandTrees.DbExpressionKind.Lambda,
        
        Array,
        InList,
        XmlToCursor,
        XmlToCursorScan,
        XmlToCursorProperty,
        Parameter,
        LikeC,
        CommandTree
    }
}